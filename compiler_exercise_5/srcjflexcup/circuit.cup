// CUP specification for a simple expression evaluator (no actions)

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;

import org.example.LexerInfo;

import org.example.tree.statements.*;
import org.example.tree.expr.*;
import org.example.tree.*;

import org.example.Type;

/* Terminals (tokens returned by the scanner). */
terminal    LexerInfo   PROGRAM, BEGIN, END;
terminal    LexerInfo   SEMI, COLON;
terminal    LexerInfo   INT, BOOL, DOUBLE, STRING, CHAR;
terminal    LexerInfo   ID;
terminal    LexerInfo   COMMA;
terminal    LexerInfo   DEF, RETURN, REF;
terminal    LexerInfo   LPAR, RPAR, LBRAC, RBRAC;
terminal    LexerInfo   IN, OUT, OUTNL;
terminal    LexerInfo   PLUS, MINUS, TIMES, DIV;
terminal    LexerInfo   INT_CONST, DOUBLE_CONST, STRING_CONST, CHAR_CONST;
terminal    LexerInfo   TRUE, FALSE;
terminal    LexerInfo   ASSIGN, ASSIGNDECL;
terminal    LexerInfo   IF, THEN, WHILE, DO, ELSE;
terminal    LexerInfo   GT, GE, LT, LE, EQ, NE;
terminal    LexerInfo   NOT, AND, OR;
terminal    LexerInfo   PIPE;

/* Non terminals */
non terminal    ProgramOpNode               Programma;
non terminal    TempNode.TempAggregateNode  Decls;
non terminal    TempNode.TempDeclsNode      VarDecls;   // T: Fix, remove TempDeclsNode and use TempAggregateNode
non terminal    VarDeclOpNode               VarDecl;
non terminal    TempNode.TempAggregateNode  VarsOptInit;
non terminal    TypeOrConstantNode          TypeOrConstant;
non terminal    TypeNode                    Type;
non terminal    ConstantNode                Constant;
non terminal    DefDeclOpNode               DefDecl;
non terminal    TempNode.TempAggregateNode  ParDecls;
non terminal    ParDeclOpNode               ParDecl;
non terminal    TempNode.TempAggregateNode  PVars;
non terminal    PVarOpNode                  PVar;
non terminal    TypeNode                    OptType;
non terminal    BodyOpNode                  Body;
non terminal    TempNode.TempAggregateNode  Statements;
non terminal    StatOpNode                  Stat;
non terminal    TempNode.TempAggregateNode  Vars;
non terminal    TempNode.TempAggregateNode  Exprs;
non terminal    ExprOpNode                  Expr;
non terminal    CallOpNode                  FunCall;
non terminal    BinaryOpNode.Type           ArithOp;
non terminal    BinaryOpNode.Type           BoolOp;
non terminal    BinaryOpNode.Type           RelOp;

/* Precedences */
precedence left OR;
precedence left AND;
precedence nonassoc NOT;
precedence nonassoc EQ, NE, LT, LE, GT, GE; /* We don't excatly know why nonassoc works, there is a conflict */
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
/* precedence nonassoc LPAR, RPAR; */





/* Grammar */
Programma ::= PROGRAM:program Decls:decls BEGIN:begin VarDecls:varDecls Statements:statements END:end
            {:
            BeginEndOpNode beginEndOpNode = new BeginEndOpNode(varDecls, (List)statements.children);
            beginEndOpNode.setStartPos(begin.line, begin.column);
            ProgramOpNode programOpNode = new ProgramOpNode((List)decls.children, beginEndOpNode);
            programOpNode.setStartPos(program.line, program.column);

            RESULT = programOpNode;
            :};

/* T: we doesn't added line and column because we think that we don't want to send diagnostic for this type of list */
Decls ::= VarDecl:varDecl Decls:decls {: RESULT = new TempNode.TempAggregateNode(decls, varDecl, true); :}
      | DefDecl:defDecl Decls:decls {: RESULT = new TempNode.TempAggregateNode(decls, defDecl, true); :}
      | /*eps*/ {: RESULT = new TempNode.TempAggregateNode(); :};

/* T: we doesn't added line and column because we think that we don't want to send diagnostic for this type of list */
VarDecls ::= VarDecls:varDecls VarDecl:varDecl {: varDecls.addVarDeclOpNode(varDecl); RESULT = varDecls; :}
         | /*eps*/ {: RESULT = new TempNode.TempDeclsNode(); :};

VarDecl ::= VarsOptInit:varsOptInit COLON TypeOrConstant:typeOrConstant SEMI
                {:
                VarDeclOpNode varDeclOpNode = new VarDeclOpNode((List)varsOptInit.children, typeOrConstant);
                varDeclOpNode.setStartPos(varsOptInit.line, varsOptInit.column);

                RESULT = varDeclOpNode;
                :};

VarsOptInit ::= ID:identifier PIPE VarsOptInit:varsOptInit
                {:
                IdentifierNode identifierNode = new IdentifierNode((String)identifier.value);
                identifierNode.setStartPos(identifier.line, identifier.column);
                VarOptInitOpNode varOptInitNode = new VarOptInitOpNode(identifierNode);
                varOptInitNode.setStartPos(identifier.line, identifier.column);
                TempNode.TempAggregateNode tempAggregateNode = new TempNode.TempAggregateNode(varsOptInit, varOptInitNode, true);
                tempAggregateNode.setStartPos(identifier.line, identifier.column);

                RESULT =  tempAggregateNode;
                :}
	   | ID:identifier ASSIGNDECL Expr:expr PIPE VarsOptInit:varsOptInit
	            {:
                IdentifierNode identifierNode = new IdentifierNode((String)identifier.value);
                identifierNode.setStartPos(identifier.line, identifier.column);
                VarOptInitOpNode varOptInitNode = new VarOptInitOpNode(identifierNode, expr);
                varOptInitNode.setStartPos(identifier.line, identifier.column);
                TempNode.TempAggregateNode tempAggregateNode = new TempNode.TempAggregateNode(varsOptInit, varOptInitNode, true);
                tempAggregateNode.setStartPos(identifier.line, identifier.column);

	            RESULT = tempAggregateNode;
	            :}
	   | ID:identifier
                {:
                IdentifierNode identifierNode = new IdentifierNode((String)identifier.value);
                identifierNode.setStartPos(identifier.line, identifier.column);
                VarOptInitOpNode varOptInitNode = new VarOptInitOpNode(identifierNode);
                varOptInitNode.setStartPos(identifier.line, identifier.column);
                TempNode.TempAggregateNode tempAggregateNode = new TempNode.TempAggregateNode(varOptInitNode);
                tempAggregateNode.setStartPos(identifier.line, identifier.column);

                RESULT = tempAggregateNode;
                :}
	   | ID:identifier ASSIGNDECL Expr:expr
	            {:
                IdentifierNode identifierNode = new IdentifierNode((String)identifier.value);
                identifierNode.setStartPos(identifier.line, identifier.column);
                VarOptInitOpNode varOptInitNode = new VarOptInitOpNode(identifierNode, expr);
                varOptInitNode.setStartPos(identifier.line, identifier.column);
                TempNode.TempAggregateNode tempAggregateNode = new TempNode.TempAggregateNode(varOptInitNode);
                tempAggregateNode.setStartPos(identifier.line, identifier.column);

	            RESULT = tempAggregateNode;
	            :}
	   ;

TypeOrConstant ::= Type:type
                {:
                    TypeOrConstantNode typeOrConstantNode = new TypeOrConstantNode(type);
                    typeOrConstantNode.setStartPos(type.line, type.column);

                    RESULT = typeOrConstantNode;
                :}
        | Constant:constant
	            {:
                    TypeOrConstantNode typeOrConstantNode = new TypeOrConstantNode(constant);
                    typeOrConstantNode.setStartPos(constant.line, constant.column);

	                RESULT = typeOrConstantNode;
	            :}
	    ;

Type ::= INT:int_t
            {:
                TypeNode typeNode = new TypeNode(Type.Integer);
                typeNode.setStartPos(int_t.line, int_t.column);

                RESULT = typeNode;
            :}
        |  BOOL:bool_t
            {:
                TypeNode typeNode = new TypeNode(Type.Boolean);
                typeNode.setStartPos(bool_t.line, bool_t.column);

                RESULT = typeNode;
            :}
        |  DOUBLE:double_t
            {:
                TypeNode typeNode = new TypeNode(Type.Double);
                typeNode.setStartPos(double_t.line, double_t.column);

                RESULT = typeNode;
            :}
        |  STRING:string_t
            {:
                TypeNode typeNode = new TypeNode(Type.String);
                typeNode.setStartPos(string_t.line, string_t.column);

                RESULT = typeNode;
            :}
        |  CHAR:char_t
            {:
                TypeNode typeNode = new TypeNode(Type.Char);
                typeNode.setStartPos(char_t.line, char_t.column);

                RESULT = typeNode;
            :}
        ;

Constant ::= TRUE:true_const
            {:
                ConstantNode constantNode = new ConstantNode(Type.Boolean, "true");
                constantNode.setStartPos(true_const.line, true_const.column);

                RESULT = constantNode;
            :}
        | FALSE:false_const
            {:
                ConstantNode constantNode = new ConstantNode(Type.Boolean, "false");
                constantNode.setStartPos(false_const.line, false_const.column);

                RESULT = constantNode;
            :}
        | INT_CONST:int_const
            {:
                ConstantNode constantNode = new ConstantNode(Type.Integer, (String)int_const.value);
                constantNode.setStartPos(int_const.line, int_const.column);

                RESULT = constantNode;
            :}
        | DOUBLE_CONST:double_const
            {:
                ConstantNode constantNode = new ConstantNode(Type.Double, (String)double_const.value);
                constantNode.setStartPos(double_const.line, double_const.column);

                RESULT = constantNode;
            :}
        | CHAR_CONST:char_const
            {:
                ConstantNode constantNode = new ConstantNode(Type.Char, (String)char_const.value);
                constantNode.setStartPos(char_const.line, char_const.column);

                RESULT = constantNode;
            :}
        | STRING_CONST:string_const
            {:
                ConstantNode constantNode = new ConstantNode(Type.String, (String)string_const.value);
                constantNode.setStartPos(string_const.line, string_const.column);

                RESULT = constantNode;
            :}

        ;

DefDecl ::= DEF:def ID:identifier LPAR ParDecls:parDecls RPAR OptType:optType Body:body
            {:
                IdentifierNode identifierNode = new IdentifierNode((String)identifier.value);
                identifierNode.setStartPos(identifier.line, identifier.column);
                DefDeclOpNode defDeclOpNode = new DefDeclOpNode(identifierNode, (List)parDecls.children, optType, body);
                defDeclOpNode.setStartPos(def.line, def.column);

                RESULT = defDeclOpNode;
            :}

        | DEF:def ID:identifier LPAR  RPAR OptType:optType Body:body
            {:
                IdentifierNode identifierNode = new IdentifierNode((String)identifier.value);
                identifierNode.setStartPos(identifier.line, identifier.column);
                DefDeclOpNode defDeclOpNode = new DefDeclOpNode(new IdentifierNode((String)identifier.value), new ArrayList<>(), optType, body);
                defDeclOpNode.setStartPos(def.line, def.column);

                RESULT = defDeclOpNode;
            :}

        ;

ParDecls  ::= ParDecl:parDecl SEMI ParDecls:parDecls
            {:
                TempNode.TempAggregateNode tempAggregateNode = new TempNode.TempAggregateNode(parDecls, parDecl, true);
                tempAggregateNode.setStartPos(parDecl.line, parDecl.column);
                RESULT = tempAggregateNode;
            :}
        | ParDecl:parDecl
            {:
                TempNode.TempAggregateNode tempAggregateNode = new TempNode.TempAggregateNode(parDecl);
                tempAggregateNode.setStartPos(parDecl.line, parDecl.column);
                RESULT = tempAggregateNode;
            :}
        ;

ParDecl ::= PVars:pVars COLON Type:type
            {:
                ParDeclOpNode parDeclOpNode = new ParDeclOpNode((List)pVars.children, type);
                parDeclOpNode.setStartPos(pVars.line, pVars.column);
                RESULT = parDeclOpNode;
            :}
        ;

PVars ::= PVar:pVar COMMA PVars:pVars
            {:
                TempNode.TempAggregateNode tempAggregateNode = new TempNode.TempAggregateNode(pVars, pVar, true);
                tempAggregateNode.setStartPos(pVar.line, pVar.column);
                RESULT = tempAggregateNode;
            :}
        | PVar:pVar {: RESULT = new TempNode.TempAggregateNode(pVar); :};

PVar ::= ID:identifier
            {:
                IdentifierNode identifierNode = new IdentifierNode((String)identifier.value);
                identifierNode.setStartPos(identifier.line, identifier.column);
                PVarOpNode pVarOpNode = new PVarOpNode(identifierNode);
                pVarOpNode.setStartPos(identifier.line, identifier.column);
                RESULT = pVarOpNode;
            :}
        | REF ID:identifier
            {:
                IdentifierNode identifierNode = new IdentifierNode((String)identifier.value);
                identifierNode.setStartPos(identifier.line, identifier.column);
                PVarOpNode pVarOpNode = new PVarOpNode(identifierNode, true);
                pVarOpNode.setStartPos(identifier.line, identifier.column);
                RESULT = pVarOpNode;
            :}
        ;

/* T: how can we store the position for Type.void?? I guess i can resolve returning the line and column of the ')' that ends the
function definition */
OptType ::= COLON Type:type
            {:
                RESULT = type;
            :}
         | /*eps*/
            {:
                RESULT = new TypeNode(Type.Void);
            :}
         ;

Body ::= LBRAC:lbrac VarDecls:varDecls Statements:statements RBRAC
            {:
                BodyOpNode bodyOpNode = new BodyOpNode((List)varDecls.varDeclOpNodes, (List)statements.children);
                bodyOpNode.setStartPos(lbrac.line, lbrac.column);
                RESULT = bodyOpNode;
            :}
        ;

/* T: we doesn't added line and column because we think that we don't want to send diagnostic for this type of list */
Statements ::= Stat:stat Statements:statements {: RESULT = new TempNode.TempAggregateNode(statements, stat, true); :}
	   | /*eps*/ {: RESULT = new TempNode.TempAggregateNode(); :};


Stat ::=  Vars:vars IN SEMI
            {:
                ReadOpNode readOpNode = new ReadOpNode((List)vars.children);
                readOpNode.setStartPos(vars.line, vars.column);

                RESULT = readOpNode;
            :}
        | Exprs:exprs OUT SEMI
            {:
                WriteOpNode writeOpNode = new WriteOpNode((List)exprs.children, false);
                writeOpNode.setStartPos(exprs.line, exprs.column);

                RESULT = writeOpNode;
            :}
        | Exprs:exprs OUTNL SEMI
            {:
                WriteOpNode writeOpNode = new WriteOpNode((List)exprs.children, true);
                writeOpNode.setStartPos(exprs.line, exprs.column);

                RESULT = writeOpNode;
            :}
	    | Vars:vars ASSIGN Exprs:exprs SEMI
            {:
                AssignOpNode assignOpNode = new AssignOpNode((List)vars.children, (List)exprs.children);
                assignOpNode.setStartPos(vars.line, vars.column);

                RESULT = assignOpNode;
            :}
	    | FunCall:funcall SEMI
            {:
                RESULT = funcall;
            :}
        | IF:IF LPAR Expr:expr RPAR THEN Body:body_1 ELSE Body:body_2
            {:
                IfThenElseOpNode ifThenElseOpNode = new IfThenElseOpNode(expr, body_1, body_2);
                ifThenElseOpNode.setStartPos(IF.line, IF.column);
                RESULT = ifThenElseOpNode;
            :}
        | IF:IF LPAR Expr:expr RPAR THEN Body:body
            {:
                IfThenOpNode ifThenOpNode = new IfThenOpNode(expr, body);
                ifThenOpNode.setStartPos(IF.line, IF.column);
                RESULT = ifThenOpNode;
            :}
        | WHILE:WHILE LPAR Expr:expr RPAR DO Body:body
            {:
                WhileOpNode whileOpNode = new WhileOpNode(expr, body);
                whileOpNode.setStartPos(WHILE.line, WHILE.column);
                RESULT = whileOpNode;
            :}
	    | RETURN:RETURN Expr:expr SEMI
            {:
                ReturnOpNode returnOpNode = new ReturnOpNode(expr);
                returnOpNode.setStartPos(RETURN.line, RETURN.column);
                RESULT = returnOpNode;
            :}
	    ;


Vars   ::= ID:identifier PIPE Vars:vars
            {:
                IdentifierNode identifierNode = new IdentifierNode((String)identifier.value);
                identifierNode.setStartPos(identifier.line, identifier.column);
                TempNode.TempAggregateNode tempAggregateNode = new TempNode.TempAggregateNode(vars, identifierNode, true);
                tempAggregateNode.setStartPos(identifier.line, identifier.column);

                RESULT = tempAggregateNode;
            :}
        | ID:identifier
            {:
                IdentifierNode identifierNode = new IdentifierNode((String)identifier.value);
                identifierNode.setStartPos(identifier.line, identifier.column);
                TempNode.TempAggregateNode tempAggregateNode = new TempNode.TempAggregateNode(identifierNode);
                tempAggregateNode.setStartPos(identifier.line, identifier.column);

                RESULT = tempAggregateNode;
            :}
        ;

Exprs ::=  Expr:expr COMMA  Exprs:exprs
        {:
            TempNode.TempAggregateNode tempAggregateNode = new TempNode.TempAggregateNode(exprs, expr, true);
            tempAggregateNode.setStartPos(expr.line, expr.column);

            RESULT = tempAggregateNode;
        :}
	| Expr:expr
	    {:
            TempNode.TempAggregateNode tempAggregateNode = new TempNode.TempAggregateNode(expr);
            tempAggregateNode.setStartPos(expr.line, expr.column);

	        RESULT = tempAggregateNode;
	    :}
	;


FunCall ::= ID:identifier LPAR Exprs:exprs RPAR
            {:
                IdentifierNode identifierNode = new IdentifierNode((String)identifier.value);
                identifierNode.setStartPos(identifier.line, identifier.column);
                CallOpNode callOpNode = new CallOpNode(identifierNode, (List)exprs.children);
                callOpNode.setStartPos(identifier.line, identifier.column);

                RESULT = callOpNode;
            :}
        | ID:identifier LPAR RPAR
            {:
                IdentifierNode identifierNode = new IdentifierNode((String)identifier.value);
                identifierNode.setStartPos(identifier.line, identifier.column);
                CallOpNode callOpNode = new CallOpNode(identifierNode);
                callOpNode.setStartPos(identifier.line, identifier.column);

                RESULT = callOpNode;
            :}
        ;


Expr   ::= Expr:expr_1 ArithOp:op Expr:expr_2
            {:
                BinaryOpNode binaryOpNode = new BinaryOpNode(op, expr_1, expr_2);
                binaryOpNode.setStartPos(expr_1.line, expr_1.column);
                RESULT = binaryOpNode;
            :}
		| Expr:expr_1 BoolOp:op Expr:expr_2
            {:
                BinaryOpNode binaryOpNode = new BinaryOpNode(op, expr_1, expr_2);
                binaryOpNode.setStartPos(expr_1.line, expr_1.column);
                RESULT = binaryOpNode;
            :}
	    | Expr:expr_1 RelOp:op Expr:expr_2
            {:
                BinaryOpNode binaryOpNode = new BinaryOpNode(op, expr_1, expr_2);
                binaryOpNode.setStartPos(expr_1.line, expr_1.column);
                RESULT = new BinaryOpNode(op, expr_1, expr_2);
            :}
		| LPAR Expr:expr RPAR
            {:
                RESULT = expr;
            :}
	    | MINUS:minus Expr:expr
            {:
                UnaryOpNode unaryOpNode = new UnaryOpNode(UnaryOpNode.Type.Uminus, expr);
                unaryOpNode.setStartPos(minus.line, minus.column);
                RESULT = unaryOpNode;
            :}
	    | NOT:not Expr:expr
            {:
                UnaryOpNode unaryOpNode = new UnaryOpNode(UnaryOpNode.Type.Not, expr);
                unaryOpNode.setStartPos(not.line, not.column);
                RESULT = unaryOpNode;
            :}
	    | ID:identifier
            {:
                IdentifierNode identifierNode = new IdentifierNode((String)identifier.value);
                identifierNode.setStartPos(identifier.line, identifier.column);
                ExprValueNode exprValueNode = new ExprValueNode(identifierNode);
                exprValueNode.setStartPos(identifier.line, identifier.column);
                RESULT = exprValueNode;
            :}
        | FunCall:funcall
            {:
                ExprValueNode exprValueNode = new ExprValueNode(funcall);
                exprValueNode.setStartPos(funcall.line, funcall.column);
                RESULT = exprValueNode;
            :}
		| Constant:constant
            {:
                ExprValueNode exprValueNode = new ExprValueNode(constant);
                exprValueNode.setStartPos(constant.line, constant.column);
                RESULT = exprValueNode;
            :}
		;

ArithOp ::= PLUS {: RESULT = BinaryOpNode.Type.Plus; :}
        |  MINUS {: RESULT = BinaryOpNode.Type.Minus; :}
        | TIMES  {: RESULT = BinaryOpNode.Type.Times; :}
        |  DIV {: RESULT = BinaryOpNode.Type.Div; :}
        ;

BoolOp ::= AND {: RESULT = BinaryOpNode.Type.And; :}
        | OR {: RESULT = BinaryOpNode.Type.Or; :}
        ;

RelOp  ::=  GT {:  RESULT = BinaryOpNode.Type.Gt; :}
        | GE {:RESULT = BinaryOpNode.Type.Ge; :}
        | LT {:RESULT = BinaryOpNode.Type.Lt; :}
        | LE {:RESULT = BinaryOpNode.Type.Le; :}
        | EQ {:RESULT = BinaryOpNode.Type.Eq; :}
        | NE {:RESULT = BinaryOpNode.Type.Ne; :}
        ;

//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example;

import java_cup.runtime.*;
import java.util.List;
import org.example.tree.statements.*;
import org.example.tree.expr.*;
import org.example.tree.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\010\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\002\000\002\005\006\000\002\006\005\000" +
    "\002\006\007\000\002\006\003\000\002\006\005\000\002" +
    "\007\003\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\011\000\002\012\010\000\002\013\005\000\002\013" +
    "\003\000\002\014\005\000\002\015\005\000\002\015\003" +
    "\000\002\016\003\000\002\016\004\000\002\017\004\000" +
    "\002\017\002\000\002\020\006\000\002\021\004\000\002" +
    "\021\002\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\006\000\002\022\004\000\002\022\012" +
    "\000\002\022\010\000\002\022\010\000\002\022\005\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\003\000\002\026\006\000\002\026\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\004\000\002\025\004\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\030" +
    "\003\000\002\030\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\004\005\001\002\000\004\002\216\001" +
    "\002\000\010\005\ufffd\016\006\020\011\001\002\000\010" +
    "\010\ufff7\045\110\064\215\001\002\000\004\010\210\001" +
    "\002\000\010\005\ufffd\016\006\020\011\001\002\000\004" +
    "\016\153\001\002\000\004\005\015\001\002\000\010\005" +
    "\ufffd\016\006\020\011\001\002\000\004\005\ufffe\001\002" +
    "\000\036\006\ufffb\016\ufffb\021\ufffb\023\ufffb\033\ufffb\036" +
    "\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\046\ufffb" +
    "\050\ufffb\061\ufffb\001\002\000\036\006\uffdb\016\033\021" +
    "\026\023\042\033\036\036\034\037\021\040\017\041\043" +
    "\042\030\043\037\046\031\050\023\061\025\001\002\000" +
    "\050\007\uffe9\010\uffe9\017\uffe9\024\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\057\uffe9\060\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\001\002\000\040\006\uffdb\016\150\021\026\023\042\026" +
    "\uffdb\033\036\036\034\037\021\040\017\041\043\042\030" +
    "\043\037\046\031\050\023\061\025\001\002\000\050\007" +
    "\uffeb\010\uffeb\017\uffeb\024\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\053\uffeb\054\uffeb\055\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\062\uffeb\063\uffeb\064\uffeb\001\002" +
    "\000\050\007\uffc3\010\uffc3\017\uffc3\024\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\053\uffc3\054\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\060\uffc3\062\uffc3\063\uffc3\064" +
    "\uffc3\001\002\000\004\023\142\001\002\000\004\006\141" +
    "\001\002\000\026\016\046\023\042\033\036\036\034\037" +
    "\021\040\017\041\043\042\030\043\037\061\025\001\002" +
    "\000\026\016\046\023\042\033\036\036\034\037\021\040" +
    "\017\041\043\042\030\043\037\061\025\001\002\000\042" +
    "\007\135\017\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4" +
    "\060\uffc4\062\uffc4\063\uffc4\001\002\000\050\007\uffee\010" +
    "\uffee\017\uffee\024\uffee\030\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\035\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057" +
    "\uffee\060\uffee\062\uffee\063\uffee\064\uffee\001\002\000\004" +
    "\023\122\001\002\000\044\007\uffce\017\120\024\uffce\030" +
    "\uffce\031\uffce\032\060\033\053\034\066\035\065\053\063" +
    "\054\056\055\071\056\061\057\057\060\070\062\054\063" +
    "\072\001\002\000\054\010\ufff7\017\uffc5\023\047\027\uffd0" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\044" +
    "\uffd0\045\110\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5" +
    "\060\uffc5\062\uffc5\063\uffc5\064\111\001\002\000\050\007" +
    "\uffec\010\uffec\017\uffec\024\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\uffec\034\uffec\035\uffec\053\uffec\054\uffec\055\uffec\056" +
    "\uffec\057\uffec\060\uffec\062\uffec\063\uffec\064\uffec\001\002" +
    "\000\040\006\ufffc\016\ufffc\021\ufffc\023\ufffc\026\ufffc\033" +
    "\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc" +
    "\046\ufffc\050\ufffc\061\ufffc\001\002\000\026\016\046\023" +
    "\042\033\036\036\034\037\021\040\017\041\043\042\030" +
    "\043\037\061\025\001\002\000\050\007\uffed\010\uffed\017" +
    "\uffed\024\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060" +
    "\uffed\062\uffed\063\uffed\064\uffed\001\002\000\006\030\103" +
    "\031\104\001\002\000\006\027\076\044\077\001\002\000" +
    "\026\016\046\023\042\033\036\036\034\037\021\040\017" +
    "\041\043\042\030\043\037\061\025\001\002\000\050\007" +
    "\uffea\010\uffea\017\uffea\024\uffea\030\uffea\031\uffea\032\uffea" +
    "\033\uffea\034\uffea\035\uffea\053\uffea\054\uffea\055\uffea\056" +
    "\uffea\057\uffea\060\uffea\062\uffea\063\uffea\064\uffea\001\002" +
    "\000\034\024\067\032\060\033\053\034\066\035\065\053" +
    "\063\054\056\055\071\056\061\057\057\060\070\062\054" +
    "\063\072\001\002\000\050\007\uffc4\010\uffc4\017\uffc4\024" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\062" +
    "\uffc4\063\uffc4\064\uffc4\001\002\000\052\007\uffc5\010\uffc5" +
    "\017\uffc5\023\047\024\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5" +
    "\057\uffc5\060\uffc5\062\uffc5\063\uffc5\064\uffc5\001\002\000" +
    "\030\016\046\023\042\024\051\033\036\036\034\037\021" +
    "\040\017\041\043\042\030\043\037\061\025\001\002\000" +
    "\004\024\052\001\002\000\050\007\uffcc\010\uffcc\017\uffcc" +
    "\024\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\062\uffcc\063\uffcc\064\uffcc\001\002\000\050\007\uffcd\010" +
    "\uffcd\017\uffcd\024\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\062\uffcd\063\uffcd\064\uffcd\001\002\000\026" +
    "\016\uffc1\023\uffc1\033\uffc1\036\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\061\uffc1\001\002\000\026\016\uffbe" +
    "\023\uffbe\033\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\061\uffbe\001\002\000\026\016\046\023\042" +
    "\033\036\036\034\037\021\040\017\041\043\042\030\043" +
    "\037\061\025\001\002\000\026\016\uffbb\023\uffbb\033\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\061" +
    "\uffbb\001\002\000\026\016\uffb8\023\uffb8\033\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\061\uffb8\001" +
    "\002\000\026\016\uffc2\023\uffc2\033\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\043\uffc2\061\uffc2\001\002\000" +
    "\026\016\uffb9\023\uffb9\033\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\043\uffb9\061\uffb9\001\002\000\026\016" +
    "\046\023\042\033\036\036\034\037\021\040\017\041\043" +
    "\042\030\043\037\061\025\001\002\000\026\016\uffbc\023" +
    "\uffbc\033\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\061\uffbc\001\002\000\026\016\046\023\042\033" +
    "\036\036\034\037\021\040\017\041\043\042\030\043\037" +
    "\061\025\001\002\000\026\016\uffbf\023\uffbf\033\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\061\uffbf" +
    "\001\002\000\026\016\uffc0\023\uffc0\033\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\061\uffc0\001\002" +
    "\000\050\007\uffc8\010\uffc8\017\uffc8\024\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\053\uffc8\054\uffc8" +
    "\055\uffc8\056\uffc8\057\uffc8\060\uffc8\062\uffc8\063\uffc8\064" +
    "\uffc8\001\002\000\026\016\uffb7\023\uffb7\033\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\061\uffb7\001" +
    "\002\000\026\016\uffba\023\uffba\033\uffba\036\uffba\037\uffba" +
    "\040\uffba\041\uffba\042\uffba\043\uffba\061\uffba\001\002\000" +
    "\026\016\uffbd\023\uffbd\033\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\061\uffbd\001\002\000\050\007" +
    "\uffc9\010\uffc9\017\uffc9\024\uffc9\030\uffc9\031\uffc9\032\060" +
    "\033\053\034\066\035\065\053\063\054\056\055\071\056" +
    "\061\057\057\060\070\062\054\063\072\064\uffc9\001\002" +
    "\000\050\007\uffca\010\uffca\017\uffca\024\uffca\030\uffca\031" +
    "\uffca\032\060\033\053\034\066\035\065\053\063\054\056" +
    "\055\071\056\061\057\057\060\070\062\054\063\072\064" +
    "\uffca\001\002\000\050\007\uffcb\010\uffcb\017\uffcb\024\uffcb" +
    "\030\uffcb\031\uffcb\032\060\033\053\034\066\035\065\053" +
    "\063\054\056\055\071\056\061\057\057\060\070\062\054" +
    "\063\072\064\uffcb\001\002\000\004\007\102\001\002\000" +
    "\026\016\046\023\042\033\036\036\034\037\021\040\017" +
    "\041\043\042\030\043\037\061\025\001\002\000\004\007" +
    "\101\001\002\000\040\006\uffd7\016\uffd7\021\uffd7\023\uffd7" +
    "\026\uffd7\033\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\046\uffd7\050\uffd7\061\uffd7\001\002\000\040" +
    "\006\uffda\016\uffda\021\uffda\023\uffda\026\uffda\033\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\046\uffda" +
    "\050\uffda\061\uffda\001\002\000\004\007\106\001\002\000" +
    "\004\007\105\001\002\000\040\006\uffd8\016\uffd8\021\uffd8" +
    "\023\uffd8\026\uffd8\033\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\046\uffd8\050\uffd8\061\uffd8\001\002" +
    "\000\040\006\uffd9\016\uffd9\021\uffd9\023\uffd9\026\uffd9\033" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\046\uffd9\050\uffd9\061\uffd9\001\002\000\050\007\uffc7\010" +
    "\uffc7\017\uffc7\024\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\066\035\065\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\060\uffc7\062\uffc7\063\uffc7\064\uffc7\001\002\000\026" +
    "\016\046\023\042\033\036\036\034\037\021\040\017\041" +
    "\043\042\030\043\037\061\025\001\002\000\004\016\112" +
    "\001\002\000\014\010\ufff7\027\uffd0\044\uffd0\045\110\064" +
    "\111\001\002\000\004\010\ufff9\001\002\000\006\027\uffd1" +
    "\044\uffd1\001\002\000\036\010\ufff6\032\060\033\053\034" +
    "\066\035\065\053\063\054\056\055\071\056\061\057\057" +
    "\060\070\062\054\063\072\064\116\001\002\000\004\016" +
    "\006\001\002\000\004\010\ufff8\001\002\000\026\016\046" +
    "\023\042\033\036\036\034\037\021\040\017\041\043\042" +
    "\030\043\037\061\025\001\002\000\012\007\uffcf\024\uffcf" +
    "\030\uffcf\031\uffcf\001\002\000\026\016\046\023\042\033" +
    "\036\036\034\037\021\040\017\041\043\042\030\043\037" +
    "\061\025\001\002\000\034\024\124\032\060\033\053\034" +
    "\066\035\065\053\063\054\056\055\071\056\061\057\057" +
    "\060\070\062\054\063\072\001\002\000\004\047\125\001" +
    "\002\000\004\025\126\001\002\000\036\016\ufffb\021\ufffb" +
    "\023\ufffb\026\ufffb\033\ufffb\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\046\ufffb\050\ufffb\061\ufffb\001\002" +
    "\000\042\006\uffd4\016\uffd4\021\uffd4\023\uffd4\026\uffd4\033" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\046\uffd4\050\uffd4\052\130\061\uffd4\001\002\000\004\025" +
    "\126\001\002\000\040\006\uffd5\016\uffd5\021\uffd5\023\uffd5" +
    "\026\uffd5\033\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\046\uffd5\050\uffd5\061\uffd5\001\002\000\036" +
    "\016\033\021\026\023\042\026\uffdb\033\036\036\034\037" +
    "\021\040\017\041\043\042\030\043\037\046\031\050\023" +
    "\061\025\001\002\000\004\026\134\001\002\000\046\005" +
    "\uffdd\006\uffdd\016\uffdd\020\uffdd\021\uffdd\023\uffdd\026\uffdd" +
    "\033\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\046\uffdd\050\uffdd\052\uffdd\061\uffdd\001\002\000\040" +
    "\006\uffd6\016\uffd6\021\uffd6\023\uffd6\026\uffd6\033\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\046\uffd6" +
    "\050\uffd6\061\uffd6\001\002\000\034\007\137\032\060\033" +
    "\053\034\066\035\065\053\063\054\056\055\071\056\061" +
    "\057\057\060\070\062\054\063\072\001\002\000\040\006" +
    "\uffd2\016\uffd2\021\uffd2\023\uffd2\026\uffd2\033\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\046\uffd2\050" +
    "\uffd2\061\uffd2\001\002\000\050\007\uffc6\010\uffc6\017\uffc6" +
    "\024\uffc6\030\uffc6\031\uffc6\032\060\033\053\034\066\035" +
    "\065\053\063\054\056\055\071\056\061\057\057\060\070" +
    "\062\uffc6\063\uffc6\064\uffc6\001\002\000\004\002\001\001" +
    "\002\000\026\016\046\023\042\033\036\036\034\037\021" +
    "\040\017\041\043\042\030\043\037\061\025\001\002\000" +
    "\034\024\144\032\060\033\053\034\066\035\065\053\063" +
    "\054\056\055\071\056\061\057\057\060\070\062\054\063" +
    "\072\001\002\000\004\051\145\001\002\000\004\025\126" +
    "\001\002\000\040\006\uffd3\016\uffd3\021\uffd3\023\uffd3\026" +
    "\uffd3\033\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\046\uffd3\050\uffd3\061\uffd3\001\002\000\006\006" +
    "\uffdc\026\uffdc\001\002\000\050\017\uffc5\023\047\027\uffd0" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\044" +
    "\uffd0\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5" +
    "\062\uffc5\063\uffc5\064\151\001\002\000\004\016\152\001" +
    "\002\000\010\027\uffd0\044\uffd0\064\151\001\002\000\004" +
    "\023\154\001\002\000\010\016\155\022\160\024\162\001" +
    "\002\000\006\010\uffe1\017\uffe1\001\002\000\004\010\205" +
    "\001\002\000\006\010\uffe2\017\203\001\002\000\004\016" +
    "\202\001\002\000\004\024\177\001\002\000\006\010\166" +
    "\025\uffde\001\002\000\006\007\164\024\uffe5\001\002\000" +
    "\006\016\155\022\160\001\002\000\004\024\uffe6\001\002" +
    "\000\014\011\176\012\174\013\173\014\171\015\175\001" +
    "\002\000\004\025\126\001\002\000\010\005\uffe7\016\uffe7" +
    "\020\uffe7\001\002\000\010\007\ufff0\024\ufff0\025\ufff0\001" +
    "\002\000\004\025\uffdf\001\002\000\010\007\ufff1\024\ufff1" +
    "\025\ufff1\001\002\000\010\007\ufff2\024\ufff2\025\ufff2\001" +
    "\002\000\010\007\uffef\024\uffef\025\uffef\001\002\000\010" +
    "\007\ufff3\024\ufff3\025\ufff3\001\002\000\006\010\166\025" +
    "\uffde\001\002\000\004\025\126\001\002\000\010\005\uffe8" +
    "\016\uffe8\020\uffe8\001\002\000\006\010\uffe0\017\uffe0\001" +
    "\002\000\006\016\155\022\160\001\002\000\004\010\uffe3" +
    "\001\002\000\014\011\176\012\174\013\173\014\171\015" +
    "\175\001\002\000\006\007\uffe4\024\uffe4\001\002\000\004" +
    "\005\uffff\001\002\000\030\011\176\012\174\013\173\014" +
    "\171\015\175\036\034\037\021\040\017\041\043\042\030" +
    "\043\037\001\002\000\004\007\ufff5\001\002\000\004\007" +
    "\214\001\002\000\004\007\ufff4\001\002\000\044\005\ufffa" +
    "\006\ufffa\016\ufffa\020\ufffa\021\ufffa\023\ufffa\026\ufffa\033" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa" +
    "\046\ufffa\050\ufffa\061\ufffa\001\002\000\004\016\006\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\011\005\007\006\006\012\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\206\005\007\006" +
    "\006\012\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\013\005\007\006\006\012\012\001\001\000" +
    "\002\001\001\000\004\004\015\001\001\000\024\005\034" +
    "\006\006\011\021\021\023\022\017\023\040\024\037\025" +
    "\031\026\026\001\001\000\002\001\001\000\020\011\021" +
    "\021\146\022\017\023\040\024\037\025\031\026\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\021\025\137\026\044\001" +
    "\001\000\010\011\021\025\135\026\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\054\030\061\031\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\021\025\106\026" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\021\025\043\026\044\001\001\000" +
    "\002\001\001\000\010\027\054\030\061\031\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\021\024" +
    "\047\025\031\026\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\021\025\074\026\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\021\025\073\026\044\001\001\000\002" +
    "\001\001\000\010\011\021\025\072\026\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\054\030\061\031\063\001\001\000\010\027\054\030\061" +
    "\031\063\001\001\000\010\027\054\030\061\031\063\001" +
    "\001\000\002\001\001\000\012\011\021\024\077\025\031" +
    "\026\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\054\030\061\031" +
    "\063\001\001\000\010\011\021\025\114\026\044\001\001" +
    "\000\006\006\112\023\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\027\054\030\061" +
    "\031\063\001\001\000\004\006\116\001\001\000\002\001" +
    "\001\000\012\011\021\024\120\025\031\026\044\001\001" +
    "\000\002\001\001\000\010\011\021\025\122\026\044\001" +
    "\001\000\010\027\054\030\061\031\063\001\001\000\002" +
    "\001\001\000\004\020\126\001\001\000\004\004\131\001" +
    "\001\000\002\001\001\000\004\020\130\001\001\000\002" +
    "\001\001\000\024\005\034\006\006\011\021\021\132\022" +
    "\017\023\040\024\037\025\031\026\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\054\030\061\031\063\001\001\000\002\001\001\000\010" +
    "\027\054\030\061\031\063\001\001\000\002\001\001\000" +
    "\010\011\021\025\142\026\044\001\001\000\010\027\054" +
    "\030\061\031\063\001\001\000\002\001\001\000\004\020" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\160\014\162\015\155\016\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\166" +
    "\001\001\000\002\001\001\000\012\013\164\014\162\015" +
    "\155\016\156\001\001\000\002\001\001\000\004\010\171" +
    "\001\001\000\004\020\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\177\001\001\000\004\020\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\203\016\156\001\001\000" +
    "\002\001\001\000\004\010\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\211\010\210\011\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\112\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= PROGRAM Decls BEGIN VarDecls Statements END 
            {
              ProgramOpNode RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TempNode.TempDeclsNode decls = (TempNode.TempDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TempNode.TempDeclsNode varDecls = (TempNode.TempDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TempNode.TempAggregateNode statements = (TempNode.TempAggregateNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            BeginEndOpNode beginEndOpNode = new BeginEndOpNode(varDecls, (List)statements.children);
            RESULT = new ProgramOpNode(decls, beginEndOpNode);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOpNode start_val = (ProgramOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= VarDecl Decls 
            {
              TempNode.TempDeclsNode RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclOpNode varDecl = (VarDeclOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TempNode.TempDeclsNode decls = (TempNode.TempDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 decls.addVarDeclOpNode(varDecl); RESULT = decls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= DefDecl Decls 
            {
              TempNode.TempDeclsNode RESULT =null;
		int defDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DefDeclOpNode defDecl = (DefDeclOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TempNode.TempDeclsNode decls = (TempNode.TempDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 decls.addDeclOpNode(defDecl); RESULT = decls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              TempNode.TempDeclsNode RESULT =null;
		 RESULT = new TempNode.TempDeclsNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecls ::= VarDecls VarDecl 
            {
              TempNode.TempDeclsNode RESULT =null;
		int varDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TempNode.TempDeclsNode varDecls = (TempNode.TempDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclOpNode varDecl = (VarDeclOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 varDecls.addVarDeclOpNode(varDecl); RESULT = varDecls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecls ::= 
            {
              TempNode.TempDeclsNode RESULT =null;
		 RESULT = new TempNode.TempDeclsNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VarsOptInit COLON TypeOrConstant SEMI 
            {
              VarDeclOpNode RESULT =null;
		int varsOptInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsOptInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TempNode.TempAggregateNode varsOptInit = (TempNode.TempAggregateNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeOrConstantleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeOrConstantright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeOrConstantNode typeOrConstant = (TypeOrConstantNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclOpNode((List)varsOptInit.children, typeOrConstant); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarsOptInit ::= ID PIPE VarsOptInit 
            {
              TempNode.TempAggregateNode RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsOptInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsOptInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TempNode.TempAggregateNode varsOptInit = (TempNode.TempAggregateNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TempNode.TempAggregateNode(varsOptInit, new VarOptInitOpNode(new IdentifierNode(identifier))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarsOptInit ::= ID ASSIGNDECL Expr PIPE VarsOptInit 
            {
              TempNode.TempAggregateNode RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOpNode expr = (ExprOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsOptInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsOptInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TempNode.TempAggregateNode varsOptInit = (TempNode.TempAggregateNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TempNode.TempAggregateNode(varsOptInit, new VarOptInitOpNode(new IdentifierNode(identifier), expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarsOptInit ::= ID 
            {
              TempNode.TempAggregateNode RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TempNode.TempAggregateNode(new VarOptInitOpNode(new IdentifierNode(identifier))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarsOptInit ::= ID ASSIGNDECL Expr 
            {
              TempNode.TempAggregateNode RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOpNode expr = (ExprOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TempNode.TempAggregateNode(new VarOptInitOpNode(new IdentifierNode(identifier), expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeOrConstant ::= Type 
            {
              TypeOrConstantNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeNode type = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeOrConstantNode(type); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeOrConstant ::= Constant 
            {
              TypeOrConstantNode RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstantNode constant = (ConstantNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeOrConstantNode(constant); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INT 
            {
              TypeNode RESULT =null;
		 RESULT = new TypeNode(TypeNode.Type.Integer); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= BOOL 
            {
              TypeNode RESULT =null;
		 RESULT = new TypeNode(TypeNode.Type.Boolean); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= DOUBLE 
            {
              TypeNode RESULT =null;
		 RESULT = new TypeNode(TypeNode.Type.Double); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= STRING 
            {
              TypeNode RESULT =null;
		 RESULT = new TypeNode(TypeNode.Type.String); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= CHAR 
            {
              TypeNode RESULT =null;
		 RESULT = new TypeNode(TypeNode.Type.Char); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Constant ::= TRUE 
            {
              ConstantNode RESULT =null;
		 RESULT = new ConstantNode(ConstantNode.Type.Boolean, "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Constant ::= FALSE 
            {
              ConstantNode RESULT =null;
		 RESULT = new ConstantNode(ConstantNode.Type.Boolean, "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Constant ::= INT_CONST 
            {
              ConstantNode RESULT =null;
		int int_constleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int int_constright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String int_const = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstantNode(ConstantNode.Type.Integer, int_const); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Constant ::= DOUBLE_CONST 
            {
              ConstantNode RESULT =null;
		int double_constleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int double_constright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String double_const = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstantNode(ConstantNode.Type.Double, double_const); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Constant ::= CHAR_CONST 
            {
              ConstantNode RESULT =null;
		int char_constleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int char_constright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String char_const = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstantNode(ConstantNode.Type.Char, char_const); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Constant ::= STRING_CONST 
            {
              ConstantNode RESULT =null;
		int string_constleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int string_constright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String string_const = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstantNode(ConstantNode.Type.String, string_const); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DefDecl ::= DEF ID LPAR ParDecls RPAR OptType Body 
            {
              DefDeclOpNode RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int parDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TempNode.TempAggregateNode parDecls = (TempNode.TempAggregateNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int optTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeNode optType = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOpNode body = (BodyOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DefDeclOpNode(new IdentifierNode(identifier), (List)parDecls.children, optType, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DefDecl ::= DEF ID LPAR RPAR OptType Body 
            {
              DefDeclOpNode RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int optTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeNode optType = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOpNode body = (BodyOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DefDeclOpNode(new IdentifierNode(identifier), null, optType, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParDecls ::= ParDecl SEMI ParDecls 
            {
              TempNode.TempAggregateNode RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParDeclOpNode parDecl = (ParDeclOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TempNode.TempAggregateNode parDecls = (TempNode.TempAggregateNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TempNode.TempAggregateNode(parDecls, parDecl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParDecls ::= ParDecl 
            {
              TempNode.TempAggregateNode RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOpNode parDecl = (ParDeclOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TempNode.TempAggregateNode(parDecl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParDecl ::= PVars COLON Type 
            {
              ParDeclOpNode RESULT =null;
		int pVarsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pVarsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TempNode.TempAggregateNode pVars = (TempNode.TempAggregateNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeNode type = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDeclOpNode((List)pVars.children, type); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PVars ::= PVar COMMA PVars 
            {
              TempNode.TempAggregateNode RESULT =null;
		int pVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PVarOpNode pVar = (PVarOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pVarsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pVarsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TempNode.TempAggregateNode pVars = (TempNode.TempAggregateNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TempNode.TempAggregateNode(pVars, pVar); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PVars ::= PVar 
            {
              TempNode.TempAggregateNode RESULT =null;
		int pVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PVarOpNode pVar = (PVarOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TempNode.TempAggregateNode(pVar); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PVar ::= ID 
            {
              PVarOpNode RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PVarOpNode(new IdentifierNode(identifier)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PVar ::= REF ID 
            {
              PVarOpNode RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PVarOpNode(new IdentifierNode(identifier), true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OptType ::= COLON Type 
            {
              TypeNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeNode type = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = type; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OptType ::= 
            {
              TypeNode RESULT =null;
		 RESULT = new TypeNode(TypeNode.Type.Void); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Body ::= LBRAC VarDecls Statements RBRAC 
            {
              BodyOpNode RESULT =null;
		int varDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TempNode.TempDeclsNode varDecls = (TempNode.TempDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TempNode.TempAggregateNode statements = (TempNode.TempAggregateNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BodyOpNode((List)varDecls.varDeclOpNodes, (List)statements.children); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statements ::= Stat Statements 
            {
              TempNode.TempAggregateNode RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatOpNode stat = (StatOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TempNode.TempAggregateNode statements = (TempNode.TempAggregateNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TempNode.TempAggregateNode(statements, stat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statements ::= 
            {
              TempNode.TempAggregateNode RESULT =null;
		 RESULT = new TempNode.TempAggregateNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= Vars IN SEMI 
            {
              StatOpNode RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= Exprs OUT SEMI 
            {
              StatOpNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= Exprs OUTNL SEMI 
            {
              StatOpNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= Vars ASSIGN Exprs SEMI 
            {
              StatOpNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= FunCall SEMI 
            {
              StatOpNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= IF LPAR Expr RPAR THEN Body ELSE Body 
            {
              StatOpNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= IF LPAR Expr RPAR THEN Body 
            {
              StatOpNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= WHILE LPAR Expr RPAR DO Body 
            {
              StatOpNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= RETURN Expr SEMI 
            {
              StatOpNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Vars ::= ID PIPE Vars 
            {
              TempNode.TempAggregateNode RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TempNode.TempAggregateNode vars = (TempNode.TempAggregateNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TempNode.TempAggregateNode(vars, new IdentifierNode(identifier)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Vars ::= ID 
            {
              TempNode.TempAggregateNode RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TempNode.TempAggregateNode(new IdentifierNode(identifier)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exprs ::= Expr COMMA Exprs 
            {
              TempNode.TempAggregateNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOpNode expr = (ExprOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TempNode.TempAggregateNode exprs = (TempNode.TempAggregateNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TempNode.TempAggregateNode(exprs, expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exprs ::= Expr 
            {
              TempNode.TempAggregateNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOpNode expr = (ExprOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TempNode.TempAggregateNode(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FunCall ::= ID LPAR Exprs RPAR 
            {
              CallOpNode RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TempNode.TempAggregateNode exprs = (TempNode.TempAggregateNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallOpNode(new IdentifierNode(identifier), (List)exprs.children); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FunCall ::= ID LPAR RPAR 
            {
              CallOpNode RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallOpNode(new IdentifierNode(identifier)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= Expr ArithOp Expr 
            {
              ExprOpNode RESULT =null;
		int expr_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOpNode expr_1 = (ExprOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinaryOpNode.Type op = (BinaryOpNode.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOpNode expr_2 = (ExprOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(op, expr_1, expr_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= Expr BoolOp Expr 
            {
              ExprOpNode RESULT =null;
		int expr_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOpNode expr_1 = (ExprOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinaryOpNode.Type op = (BinaryOpNode.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOpNode expr_2 = (ExprOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(op, expr_1, expr_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= Expr RelOp Expr 
            {
              ExprOpNode RESULT =null;
		int expr_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprOpNode expr_1 = (ExprOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinaryOpNode.Type op = (BinaryOpNode.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOpNode expr_2 = (ExprOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(op, expr_1, expr_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= LPAR Expr RPAR 
            {
              ExprOpNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprOpNode expr = (ExprOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= MINUS Expr 
            {
              ExprOpNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOpNode expr = (ExprOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOpNode(UnaryOpNode.Type.Uminus, expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= NOT Expr 
            {
              ExprOpNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprOpNode expr = (ExprOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOpNode(UnaryOpNode.Type.Not, expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= ID 
            {
              ExprOpNode RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprValueNode(new IdentifierNode(identifier)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= FunCall 
            {
              ExprOpNode RESULT =null;
		int funcallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallOpNode funcall = (CallOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprValueNode(funcall); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Constant 
            {
              ExprOpNode RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstantNode constant = (ConstantNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprValueNode(constant); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ArithOp ::= PLUS 
            {
              BinaryOpNode.Type RESULT =null;
		 RESULT = BinaryOpNode.Type.Plus; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ArithOp ::= MINUS 
            {
              BinaryOpNode.Type RESULT =null;
		 RESULT = BinaryOpNode.Type.Minus; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ArithOp ::= TIMES 
            {
              BinaryOpNode.Type RESULT =null;
		 RESULT = BinaryOpNode.Type.Times; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ArithOp ::= DIV 
            {
              BinaryOpNode.Type RESULT =null;
		 RESULT = BinaryOpNode.Type.Div; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BoolOp ::= AND 
            {
              BinaryOpNode.Type RESULT =null;
		 RESULT = BinaryOpNode.Type.And; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BoolOp ::= OR 
            {
              BinaryOpNode.Type RESULT =null;
		 RESULT = BinaryOpNode.Type.Or; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RelOp ::= GT 
            {
              BinaryOpNode.Type RESULT =null;
		 RESULT = BinaryOpNode.Type.Gt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RelOp ::= GE 
            {
              BinaryOpNode.Type RESULT =null;
		 RESULT = BinaryOpNode.Type.Ge; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RelOp ::= LT 
            {
              BinaryOpNode.Type RESULT =null;
		 RESULT = BinaryOpNode.Type.Lt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RelOp ::= LE 
            {
              BinaryOpNode.Type RESULT =null;
		 RESULT = BinaryOpNode.Type.Le; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RelOp ::= EQ 
            {
              BinaryOpNode.Type RESULT =null;
		 RESULT = BinaryOpNode.Type.Eq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RelOp ::= NE 
            {
              BinaryOpNode.Type RESULT =null;
		 RESULT = BinaryOpNode.Type.Ne; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
